# .github/workflows/deploy.yml for stslaug.github.io (your main portfolio site)

name: Deploy Main Portfolio to GitHub Pages

on:
  # Triggers the workflow on pushes to the 'main' branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read # Allows reading repository content
  pages: write   # Allows writing to the GitHub Pages deployment
  id-token: write # Required for OpenID Connect (OIDC) for deploy-pages action

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# This ensures that only the latest push to 'main' is deployed, preventing stale deployments.
concurrency:
  group: "github_pages_main_site" # Unique group name for this specific deployment
  cancel-in-progress: true # Cancel previous runs if a new one is pushed

jobs:
  # Build job: Builds the Next.js application
  build:
    runs-on: ubuntu-latest # Use a Linux runner for faster execution and consistent environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checks out your repository code

      - name: Detect package manager
        id: detect-package-manager # Stores outputs like 'manager', 'command', 'runner'
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT # 'npm ci' for clean install in CI environments
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT # 'npx' to run Next.js commands
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Sets up Node.js environment
        with:
          node-version: "20" # Recommended LTS version for Next.js. Adjust if your project requires different.
          cache: ${{ steps.detect-package-manager.outputs.manager }} # Caches node modules for faster builds

      - name: Setup Pages
        uses: actions/configure-pages@v5 # Configures the GitHub Pages environment
        # For an apex domain site (like seanslaughter.dev), we do NOT need
        # static_site_generator: next, as it's typically for basePath injection
        # in project pages. This workflow assumes your next.config.js is correctly
        # configured for a root domain (output: 'export', no basePath).

      - name: Restore Next.js cache
        uses: actions/cache@v4 # Restores build cache for Next.js
        with:
          path: |
            .next/cache
          # The cache key changes when packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx', '**.[jt]s.map', '**.[jt]sx.map') }}
          # If only source files changed, restore from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        # Runs the Next.js build command which generates the 'out' directory
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3 # Uploads the build output for deployment
        with:
          path: ./build # Path to your Next.js static build output (from output: 'export')

  # Deployment job: Deploys the built artifact to GitHub Pages
  deploy:
    environment:
      name: github-pages # The GitHub Pages environment (set in repo settings)
      url: ${{ steps.deployment.outputs.page_url }} # URL of the deployed site
    runs-on: ubuntu-latest
    needs: build # This job depends on the 'build' job completing successfully
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # The action that performs the actual deployment
